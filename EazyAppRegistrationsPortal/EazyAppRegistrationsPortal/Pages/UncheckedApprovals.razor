@page "/uncheckedapprovals/{Key}"

@inject CustomerService CustomerService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ISessionBridgeVmManager SessionBridgeVmManager
@inject IConfigReader ConfigReader


    <body>

        @if (customers == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <h5>Unchecked Approvals</h5>
            <br />

            <table id="example" class="table" style="width: 100%">
                <thead>
                    <tr>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Date Added</th>
                        <th>Checked</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var customer in customers)
                    {
                        <tr>
                            <td>@customer.Firstname</td>
                            <td>@customer.Surname</td>
                            <td>@customer.DateAdded</td>
                            <td>@customer.Checked</td>

                            <td>
                                <button class="btn btn-outline-primary" @onclick="() => InitiateApprove(customer.CustomerNumber)">Initiate Approval</button> | 
                                <a href="customer_details/@Convert.ToInt64(customer.CustomerNumber)/@Key">Details</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </body>

@code {

    [Parameter]
    public string Key { get; set; }

    int delayMillSec;
    bool refreshOnAdd;
    List<CustomerVm> customers;

    protected override async Task OnInitializedAsync()
    {
        SessionBridgeVm sessionBridge = SessionBridgeVmManager.GetFromBasket(Key);
        if (sessionBridge == null)
        {
            NavigationManager.NavigateTo(ConfigReader.Read("VasPortalUrl"));
            return;
        }

        if (sessionBridge.RoleId != 2)
        {
            NavigationManager.NavigateTo($"access_denied/{Key}");
            return;
        }

        delayMillSec = Convert.ToInt32(ConfigReader.Read("DelayMs"));
        refreshOnAdd = Convert.ToBoolean(ConfigReader.Read("RefreshOnAdd"));
        customers = await CustomerService.GetUncheckedCustomers();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        CallAddTable();
    }

    private void CallAddTable()
    {
        JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#example");
    }


    protected async Task InitiateApprove(string customerNumber)
    {
        await CustomerService.CheckCustomer(Key, customerNumber);

        if (refreshOnAdd)
        {
            NavigationManager.NavigateTo($"operation_successful/2/{Key}");
        }
        else
        {
            var customer = customers.FirstOrDefault(c => c.CustomerNumber == customerNumber);

            if (customer != null)
            {
                customers.Remove(customer);
                await Task.Delay(delayMillSec);
            }
        }
    }

}
