@page "/policies/{Key}"

@inject IMemberService MemberService
@inject IJSRuntime JSRuntime
@inject ISessionChecker SessionChecker
@inject IConfigReader ConfigReader
@inject NavigationManager NavigationManager
@inject IPageAccessChecker PageAccessChecker
@inject ISessionLifeChecker SessionLifeChecker

<body>
    <div class="col-lg-12">
        <div class="card card-red">
            @if (members == null)
            {
                <Spinner></Spinner>
            }
            else
            {
                <div class="card-header">
                    <h5 class="card-title">Policies</h5>
                </div>
                <div class="card-body">
                    <div class="mt-2"></div>
                    <table id="policiesTable" class="table table-striped table-bordered" style="width:100%">
                        <thead>
                            <tr>
                                <th>Customer Name</th>
                                <th>Phone Number</th>
                                <th>Account Number</th>
                                <th>Turn Over Type</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var member in members)
                            {
                                <tr>
                                    <td>@member.CustomerName</td>
                                    <td>@member.PhoneNumber</td>
                                    <td>@member.AccountNumber</td>
                                    <td>@member.TurnOver.TurnOverType</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="card-footer"></div>
            }
        </div>
    </div>
</body>

@code {

    [Parameter]
    public string Key { get; set; }

    List<MemberVm> members;

    protected override async Task OnInitializedAsync()
    {
        if (SessionChecker.IsSessionMissing(Key) || SessionLifeChecker.IsExpired(Key))
        {
            NavigationManager.NavigateTo(ConfigReader.Read("VasPortalUrl"));
            return;
        }

        if (!await PageAccessChecker.HasAccess("policies", Key))
        {
            NavigationManager.NavigateTo($"access_denied/{Key}");
            return;
        }

        members = await MemberService.GetMembersAsync(orderBy: MemberExpressions.OrderByIdAsc());
    }

    protected override void OnAfterRender(bool firstRender)
    {
        ActivateTable();
    }

    private void ActivateTable()
    {
        JSRuntime.InvokeAsync<object>("ActivateDataTable", "#policiesTable");
    }

}