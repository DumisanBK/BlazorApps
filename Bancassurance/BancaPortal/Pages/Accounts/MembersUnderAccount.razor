@page "/members_under_account/{Account}/{Key}"

@inject IAccountSettingsService AccountSettingsService
@inject ISessionBridgeVmManager SessionBridgeVmManager
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ISessionChecker SessionChecker
@inject IConfigReader ConfigReader
@inject IPageAccessChecker PageAccessChecker
@inject ISessionLifeChecker SessionLifeChecker
@inject IPortalUserActionsService ActionsService
@inject IMemberService MemberService

    <body>
        <div class="col-lg-12">
            <div class="card card-red">
                @if (members == null)
                {
                    <Spinner></Spinner>
                }
                else
                {
                    <div class="card-header">
                        <h5 class="card-title">Member(s) Under Account @Account</h5>
                    </div>
                    <div class="card-body">
                        <div class="mt-2"></div>
                        <a href="remove_account/@Account/@members.Count()/@Key" role="button" class="btn btn-danger">Remove Account</a>
                        <div class="mt-2"></div>
                        <table id="membersUnderAccountTable" class="table table-striped table-bordered"  style="width:100%">
                            <thead>
                                <tr>
                                    <th>Member Name</th>
                                    <th>Phone Number</th>
                                    <th>Account Number</th>
                                    <th>Turn Over Type</th>
                                    <th>Dependants Total</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var member in members)
                                {
                                    <tr>
                                        <td>@member.CustomerName</td>
                                        <td>@member.PhoneNumber</td>
                                        <td>@member.AccountNumber</td>
                                        <td>@member.TurnOver.TurnOverType</td>
                                        <td>@member.Dependents?.Count()</td>
                                        <td>
                                            <span><a href="dependants/@member.Id/@Key" class="btn btn-primary">Dependants</a></span>
                                            <span><a href="unsubscribe/@member.Id/@Key" role="button" class="btn btn-danger">Unsubscribe</a></span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="card-footer">
                        <a href="accounts/@Account/@Key" role="button" class="btn btn-link float-right">Back</a>
                    </div>
                }
            </div>
        </div>
    </body>

@code {

    [Parameter]
    public string Account { get; set; }
    [Parameter]
    public string Key { get; set; }

    List<MemberVm> members;

    protected override async Task OnInitializedAsync()
    {
        if (SessionChecker.IsSessionMissing(Key) || SessionLifeChecker.IsExpired(Key))
        {
            NavigationManager.NavigateTo(ConfigReader.Read("VasPortalUrl"));
            return;
        }

        if (!await PageAccessChecker.HasAccess("members_under_account", Key))
        {
            NavigationManager.NavigateTo($"access_denied/{Key}");
        }

        await FetchMembersByAccount();
    }


    protected async Task FetchMembersByAccount()
    {
        members = await MemberService.GetMembersAsync(MemberExpressions.FilterByAccount(Account));

        if (members == null)
        {
            NavigationManager.NavigateTo($"accounts/{Key}");
            return;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        ActivateTable();
    }

    private void ActivateTable()
    {
        JSRuntime.InvokeAsync<object>("ActivateDataTable", "#membersUnderAccountTable");
    }

}