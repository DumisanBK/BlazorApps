@page "/add_normal/{Id:long}/{Key}"

@inject IConfigReader ConfigReader
@inject IMemberService MemberService
@inject IDependantsService DependantsService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AutoMapper.IMapper Mapper
@inject INumberService NumberService
@inject ISessionChecker SessionChecker
@inject IConfigReader ConfigReader
@inject IPageAccessChecker PageAccessChecker
@inject ISessionBridgeVmManager SessionBridgeVmManager
@inject IRelationshipsService RelationshipsService
@inject ISessionLifeChecker SessionLifeChecker
@inject IPortalUserActionsService ActionsService

<body>
    <div class="col-lg-12">
        @if (member == null)
        {
            <Spinner></Spinner>
        }
        else
        {
            <!-- /.card -->
            <!-- Horizontal Form -->
            <div class="card card-red">
                <div class="card-header">
                    <h5 class="card-title">Add dependant of <span class="text-white">@member.CustomerName</span></h5>
                </div>
                <!-- /.card-header -->
                <!-- form start -->
                <EditForm Model="@_dependantForm" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="card-body">
                        <div class="form-group row">
                            <label></label>
                            <div class="col-sm-10">
                                <label class="text-info">@message</label>
                                <ValidationSummary />
                            </div>
                        </div>

                        <div class="form-group row">
                            <label for="firstName" class="col-sm-6 col-form-label">First Name</label>
                            <div class="col-sm-10">
                                <InputText id="firstName" @bind-Value="_dependantForm.FirstName" Class="form-control" ReadOnly="@cannotAddNormal" />
                            </div>
                        </div>

                        <div class="form-group row">
                            <label for="lastName" class="col-sm-6 col-form-label">Last Name</label>
                            <div class="col-sm-10">
                                <InputText id="lastName" @bind-Value="_dependantForm.SurName" Class="form-control" ReadOnly="@cannotAddNormal" />
                            </div>
                        </div>

                        <div class="form-group row">
                            <label for="phoneNumber" class="col-sm-6 col-form-label">Phone Number</label>
                            <div class="col-sm-10">
                                <InputText id="phoneNumber" @bind-Value="_dependantForm.PhoneNumber" Class="form-control" ReadOnly="@cannotAddNormal" />
                            </div>
                        </div>

                        <div class="form-group row">
                            <label for="age" class="col-sm-6 col-form-label">Age</label>
                            <div class="col-sm-10">
                                <InputSelect id="age" @bind-Value="_dependantForm.Age" Class="form-control" ReadOnly="@cannotAddNormal">
                                    <option selected="selected" disabled="disabled">Select</option>
                                    @foreach (var age in ages)
                                        {
                                        <option value="@age">@age</option>
                                        }
                                </InputSelect>
                            </div>
                        </div>

                        <div class="form-group row">
                            <label for="relationship" class="col-sm-6 col-form-label">Relationship</label>
                            <div class="col-sm-10">
                                <InputSelect id="relationship" @bind-Value="_dependantForm.Relationship" Class="form-control" ReadOnly="@cannotAddNormal">
                                    <option selected="selected" disabled="disabled">Select</option>
                                    @foreach (var relationship in relationships)
                                        {
                                        <option value="@relationship.Name">@relationship.Name</option>
                                        }
                                </InputSelect>
                            </div>
                        </div>

                        <div class="form-group row">
                            <label for="teller" class="col-sm-6 col-form-label">Teller</label>
                            <div class="col-sm-10">
                                <InputText id="teller" @bind-Value="_dependantForm.InputTeller" Class="form-control" ReadOnly="true" />
                            </div>
                        </div>

                    </div>
                    <!-- /.card-body -->
                    <div class="card-footer">
                        <button type="submit" class="btn btn-primary" Disabled="@cannotAddNormal">Add</button>
                        <a href="dependants/@member.Id/@Key" class="float-right">Back</a>
                    </div>
                    <!-- /.card-footer -->
                </EditForm>
            </div>
            <!-- /.card -->
        }
    </div>
</body>

@code {
    [Parameter]
    public long Id { get; set; }
    [Parameter]
    public string Key { get; set; }

    private DependantForm _dependantForm = new DependantForm();

    MemberVm member;
    bool cannotAddNormal;
    string message;

    List<int> ages = new List<int>();
    List<RelationshipsVm> relationships = new List<RelationshipsVm>();

    protected override async Task OnInitializedAsync()
    {
        if (SessionChecker.IsSessionMissing(Key) || SessionLifeChecker.IsExpired(Key))
        {
            NavigationManager.NavigateTo(ConfigReader.Read("VasPortalUrl"));
            return;
        }

        if (!await PageAccessChecker.HasAccess("add_normal", Key))
        {
            NavigationManager.NavigateTo($"access_denied/{Key}");
        }

        _dependantForm.InputTeller = SessionBridgeVmManager.GetFromBasket(Key).FullName;

        await FetchMember(Id);
        await InitializeRelationshipsAsync();

        InitializeAges();
    }

    protected async Task FetchMember(long memberId)
    {
        member = await MemberService.GetMemberAsync(Id);

        if (member == null)
        {
            RedirectToMembers();
            return;
        }

        cannotAddNormal = !(MemberDependantsUtils.CanAddNormal(Mapper.Map<MainMemberDetails>(member), ConfigReader));
    }

    protected void InitializeAges()
    {
        int start = Convert.ToInt32(ConfigReader.Read("DependantsMinimumAge"));
        int end = Convert.ToInt32(ConfigReader.Read("DependantsMaximumAge"));
        int count = (end - start) + 1;

        ages = NumberService.Generate(start, count).ToList();
    }

    protected void RedirectToMembers()
    {
        NavigationManager.NavigateTo($"members/{Key}");
    }

    protected void RedirectToDependants()
    {
        NavigationManager.NavigateTo($"dependants/{Id}/{Key}");
    }

    protected async Task InitializeRelationshipsAsync()
    {
        relationships = await RelationshipsService.GetRelationshipsAsync();
    }

    protected async Task HandleValidSubmit()
    {
        if (await AddDependantAsync())
        {
            RedirectToDependants();
            return;
        }
        else
        {

            _dependantForm = new DependantForm();
            message = "Dependant not added. Please try again later";
        }
    }

    protected async Task<bool> AddDependantAsync()
    {
        _dependantForm.InputTeller = Convert.ToString(SessionBridgeVmManager.GetFromBasket(Key).TellerId);

        DependantFormUtil.Capitilize(ref _dependantForm);

        var dependantVm = Mapper.Map<DependantVm>(_dependantForm);
        dependantVm.MemberId = Id;
        dependantVm.Normal = 1;
        dependantVm.DateAdded = DateTime.Now;
        dependantVm.InputTeller = Convert.ToString(SessionBridgeVmManager.GetFromBasket(Key).TellerId);

        var dependant = Mapper.Map<Dependents>(dependantVm);

        bool submitted = await DependantsService.AddNormalAsync(dependant);

        string action = submitted ? $"Added normal for member with Id: {Id}"
           : $"Failed to add normal for member with Id: {Id}";

        await ActionsService.AddAsync(SessionBridgeVmManager.GetFromBasket(Key),
                action, $"{dependantVm.FirstName} {dependantVm.SurName}");

        return submitted;
    }

}