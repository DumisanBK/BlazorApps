#pragma checksum "C:\Users\kaunda.dum\Documents\Visual Studio 2019\Projects\bancassurance\Bancassurance\BancaPortal\Pages\Members\AddPolicy.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9378c481b2f48201012a1c2d325b90bdc1a863f7"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BancaPortal.Pages.Members
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\kaunda.dum\Documents\Visual Studio 2019\Projects\bancassurance\Bancassurance\BancaPortal\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\kaunda.dum\Documents\Visual Studio 2019\Projects\bancassurance\Bancassurance\BancaPortal\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\kaunda.dum\Documents\Visual Studio 2019\Projects\bancassurance\Bancassurance\BancaPortal\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\kaunda.dum\Documents\Visual Studio 2019\Projects\bancassurance\Bancassurance\BancaPortal\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\kaunda.dum\Documents\Visual Studio 2019\Projects\bancassurance\Bancassurance\BancaPortal\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\kaunda.dum\Documents\Visual Studio 2019\Projects\bancassurance\Bancassurance\BancaPortal\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\kaunda.dum\Documents\Visual Studio 2019\Projects\bancassurance\Bancassurance\BancaPortal\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\kaunda.dum\Documents\Visual Studio 2019\Projects\bancassurance\Bancassurance\BancaPortal\_Imports.razor"
using BancaPortal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\kaunda.dum\Documents\Visual Studio 2019\Projects\bancassurance\Bancassurance\BancaPortal\_Imports.razor"
using BancaPortal.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\kaunda.dum\Documents\Visual Studio 2019\Projects\bancassurance\Bancassurance\BancaPortal\_Imports.razor"
using BancaPortal.Utils;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\kaunda.dum\Documents\Visual Studio 2019\Projects\bancassurance\Bancassurance\BancaPortal\_Imports.razor"
using BancassuranceApi.ViewModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\kaunda.dum\Documents\Visual Studio 2019\Projects\bancassurance\Bancassurance\BancaPortal\_Imports.razor"
using BancassuranceApi.Mappers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\kaunda.dum\Documents\Visual Studio 2019\Projects\bancassurance\Bancassurance\BancaPortal\_Imports.razor"
using BancassuranceApi.Utils;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\kaunda.dum\Documents\Visual Studio 2019\Projects\bancassurance\Bancassurance\BancaPortal\_Imports.razor"
using BancassuranceApi.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\kaunda.dum\Documents\Visual Studio 2019\Projects\bancassurance\Bancassurance\BancaPortal\_Imports.razor"
using BancassuranceApi.Resources;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\kaunda.dum\Documents\Visual Studio 2019\Projects\bancassurance\Bancassurance\BancaPortal\_Imports.razor"
using BancassuranceApi.Expressions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\kaunda.dum\Documents\Visual Studio 2019\Projects\bancassurance\Bancassurance\BancaPortal\_Imports.razor"
using BancassuranceLib.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\kaunda.dum\Documents\Visual Studio 2019\Projects\bancassurance\Bancassurance\BancaPortal\_Imports.razor"
using BlazorInputFile;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/add_member/{Key}")]
    public partial class AddPolicy : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 151 "C:\Users\kaunda.dum\Documents\Visual Studio 2019\Projects\bancassurance\Bancassurance\BancaPortal\Pages\Members\AddPolicy.razor"
       
    [Parameter]
    public string Key { get; set; }

    private PolicyForm _policyForm = new PolicyForm();

    private bool showDate = false;
    private bool redirectIsOn = false;
    private bool disableButton = true;
    private bool cannotAddPolicy = true;
    private bool multipleAccount = false;
    private bool cannotFetchAccount = false;

    private string message;
    private string backedUpAccount;

    private List<int> ages = new List<int>();
    private List<TitlesVm> titles = new List<TitlesVm>();
    private List<TurnOverTypeVm> turnOverTypes = new List<TurnOverTypeVm>();

    private CustomerMessage customerMessageResult;

    protected override async Task OnInitializedAsync()
    {
        if (SessionChecker.IsSessionMissing(Key) || SessionLifeChecker.IsExpired(Key))
        {
            NavigationManager.NavigateTo(ConfigReader.Read("VasPortalUrl"));
            return;
        }

        if (!await PageAccessChecker.HasAccess("add_member", Key))
        {
            NavigationManager.NavigateTo($"access_denied/{Key}");
        }

        CheckIfAccountCanBeFetched();

        await GetTurnOverTypesAsync();
        await GetTitlesAsync();

        InitializeAges();

        await InitializeShowDate();

        await InitializeRedirectIsOn();
    }

    protected async Task InitializeShowDate()
    {
        var dateOnAddSetting = await SystemSettingsService.GetSystemSettingAsync(1);

        if (dateOnAddSetting == null) return;

        showDate = dateOnAddSetting.Value;
    }

    protected async Task InitializeRedirectIsOn()
    {
        var redirectSetting = await SystemSettingsService.GetSystemSettingAsync(2);

        if (redirectSetting == null) return;

        redirectIsOn = redirectSetting.Value;
    }

    protected void CheckIfAccountCanBeFetched()
    {
        try
        {
            message = "Please wait...";

            cannotFetchAccount = !T24AccountService.CanFetchAccount();
        }
        catch (Exception)
        {
            message = string.Empty;
            cannotFetchAccount = false;
        }
    }

    protected void InitializeAges()
    {
        int start = Convert.ToInt32(ConfigReader.Read("MemberMinimumAge"));
        int end = Convert.ToInt32(ConfigReader.Read("MemberMaximumAge"));
        int count = (end - start) + 1;

        ages = NumberService.Generate(start, count).ToList();
    }

    protected void RedirectToMembers()
    {
        NavigationManager.NavigateTo($"operation_successful/4/{Key}");
    }

    protected void HandleFileSelected(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();

        if (file == null)
        {
            return;
        }

        long fileSize = file.Size;
        long maxSize = FileUtils.GetMaxImageSize(ConfigReader);
        if (fileSize > maxSize)
        {
            message = $"File cannot exceed {ConfigReader.Read("MaxImageSizeString")}";
            return;
        }

        string fileType = FileUtils.GetAllowedImageTypes(ConfigReader)
            .SingleOrDefault(t => t == file.Type);
        if (fileType == null)
        {
            message = $"File should be an image";
            return;
        }

        _policyForm.Picture = file;
        _policyForm.PictureAsString = file.Name;
    }

    protected async Task HandleValidSubmit()
    {
        if (!await UploadPictureAsync())
        {
            return;
        }

        if (await AddMemberAsync())
        {
            if (redirectIsOn)
            {
                NavigationManager.NavigateTo($"operation_successful/4/{Key}");
            }
            else
            {
                NavigationManager.NavigateTo($"operation_successful/7/{Key}");
            }
            return;
        }

        _policyForm = new PolicyForm();

        message = "Policy not added. Please try again later";

        disableButton = true;
        cannotAddPolicy = true;
        multipleAccount = false;
        backedUpAccount = string.Empty;
    }

    void ClearPictureFromPolicyForm()
    {
        try
        {
            _policyForm.Picture = null;
        }
        catch (Exception)
        {
        }
    }

    protected async Task<bool> UploadPictureAsync()
    {
        bool saved = false;

        var picture = _policyForm.Picture;

        if (picture != null)
        {
            string filename = $"{_policyForm.FirstName}{_policyForm.SurName}_{_policyForm.PhoneNumber}"
                + $"_{Guid.NewGuid()}.{ConfigReader.Read("CustomerPictureExtension")}";

            saved = await FileUtils.SaveFileAsync(picture,
                ConfigReader.Read("FilePath"), filename, ActionsService, SessionBridgeVmManager.GetFromBasket(Key));

            message = saved ? string.Empty : "Failed to upload picture";

            ClearPictureFromPolicyForm();
        }
        else
        {
            message = "Select a picture please!";
        }

        return saved;
    }

    protected async Task<bool> AddMemberAsync()
    {
        bool added = false;

        try
        {
            if (customerMessageResult == null)
                return false;

            if (multipleAccount)
            {
                _policyForm.CustomerName = $"{_policyForm.Title} {_policyForm.FirstName} {_policyForm.SurName}";
            }

            _policyForm.AccountNumber = backedUpAccount;
            _policyForm.Category = Convert.ToString(customerMessageResult.MessageData.AccCategCode);
            _policyForm.CompanyCode = customerMessageResult.MessageData.CompanyCode;
            _policyForm.CompanyName = customerMessageResult.MessageData.BranchName;
            _policyForm.CategoryDescription = customerMessageResult.MessageData.AccCategDesc;
            _policyForm.Cashier = Convert.ToString(SessionBridgeVmManager.GetFromBasket(Key).TellerId);
            _policyForm.TurnOverId = Convert.ToInt32(_policyForm.PolicyType);
            if (!showDate) _policyForm.DateCreated = DateTime.Now;

            PolicyFormUtils.Capitalize(ref _policyForm);

            added = await MemberService.AddMemberAsync(_policyForm);

            string action = added ? "Added policy" : "Failed to add policy";

            await ActionsService.AddAsync(SessionBridgeVmManager.GetFromBasket(Key),
                    action, $"{_policyForm.Title} {_policyForm.FirstName} {_policyForm.SurName}");

            return added;
        }
        catch (Exception exception)
        {
            FileUtils.LogErrors(exception, ActionsService, SessionBridgeVmManager.GetFromBasket(Key));
        }

        return added;
    }

    protected async Task GetTurnOverTypesAsync()
    {
        turnOverTypes = await TurnOverService.GetTurnOverTypesAsync();
    }

    protected async Task GetTitlesAsync()
    {
        titles = await TitlesService.GetTitlesAsync();
    }

    protected async Task DoesAccountExist()
    {
        try
        {
            if (string.IsNullOrEmpty(_policyForm.AccountNumber))
            {
                message = "Provide account number please!";
                return;
            }

            message = "Checking account, please wait...";

            customerMessageResult = await T24AccountService.GetCustomerDetailsAsync(_policyForm.AccountNumber);
            if (customerMessageResult.MessageCode != 0)
            {
                cannotAddPolicy = true;
                disableButton = true;
                message = "Account does not exist in T24";

                return;
            }

            multipleAccount = await AccountSettingsService.IsMultipleAccount(_policyForm.AccountNumber);
            if (multipleAccount)
            {
                EnablePolicyForm();
            }
            else
            {
                bool memberFound = await MemberService.AnyAsync(MemberExpressions.FilterByAccount(_policyForm.AccountNumber));
                if (memberFound)
                {
                    cannotAddPolicy = true;
                    disableButton = true;
                    message = "This account cannot accept multiple members";
                }
                else
                {
                    EnablePolicyForm();

                    FillPolicyForm();
                }
            }
        }
        catch (Exception exception)
        {
            message = "T24 error";

            FileUtils.LogErrors(exception, ActionsService, SessionBridgeVmManager.GetFromBasket(Key));
        }
    }

    private void EnablePolicyForm()
    {
        cannotAddPolicy = false;
        disableButton = false;
        message = String.Empty;
        backedUpAccount = _policyForm.AccountNumber;
    }

    private void FillPolicyForm()
    {
        if (customerMessageResult.MessageCode != 0)
            return;

        _policyForm.Title = customerMessageResult.MessageData.Title;
        _policyForm.Gender = customerMessageResult.MessageData.Gender;
        _policyForm.SurName = customerMessageResult.MessageData.Surname;
        _policyForm.FirstName = customerMessageResult.MessageData.FirstName;
        _policyForm.CustomerName = customerMessageResult.MessageData.CustomerName;
        _policyForm.PhoneNumber = customerMessageResult.MessageData.MobilePhone;

        if (!string.IsNullOrEmpty(customerMessageResult.MessageData.DateOfBirth))
        {
            int age = DateUtils.FindDifferenceBetweenThenAndNow(
                customerMessageResult.MessageData.DateOfBirth);

            int ageLimit = Convert.ToInt32(ConfigReader.Read("MemberMaximumAge"));

            if (age > ageLimit)
            {
                cannotAddPolicy = true;
                disableButton = true;
                message = $"Maximum age is {ageLimit}";

                return;
            }

            _policyForm.Age = Convert.ToString(age);
            backedUpAccount = _policyForm.AccountNumber;
        }
        else
        {
            cannotAddPolicy = true;
            disableButton = true;
            backedUpAccount = string.Empty;
            message = $"Failed to retrieve the members' age";
        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IPortalUserActionsService ActionsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISessionLifeChecker SessionLifeChecker { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISystemSettingsService SystemSettingsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private INumberService NumberService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITitlesService TitlesService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISessionBridgeVmManager SessionBridgeVmManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IPageAccessChecker PageAccessChecker { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IConfigReader ConfigReader { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISessionChecker SessionChecker { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AutoMapper.IMapper Mapper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAccountSettingsService AccountSettingsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITurnOverService TurnOverService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IT24AccountService T24AccountService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMemberService MemberService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
